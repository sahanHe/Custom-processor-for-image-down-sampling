module statemachine(input [3:0] opcode,
							input clk_out,
							input enable_processor,
							output reg inc_pc,
							output reg read_enable,
							output reg [2:0] opcode,
							output reg write_RAM,
							output reg read_RAM,
							//output wire [7:0] LED,
							output reg wr_en);		
							
reg [7:0] state;
//assign LED = state;
initial
begin
state=8'b0;
end
always@(negedge clkout)
begin
	case(state)
		8'b00000000:
			begin
				inc_pc<=0;
				read_enable <= 0;
				wr_en <= 0;
				opcode <= 3'b000;
				read_RAM <= 0;
				write_RAM <= 0;
				if (start_en)
				begin
					state <= 8'b00000001;
				end
				else
				begin
					state <=8'b00000000;
				end
			end
		8'b00000001:
			begin
				inc_pc<=0;
				read_enable <= 1;
				wr_en <= 0;
				opcode <= 3'b000;
				read_RAM <= 0;
				write_RAM <= 0;
				state <=8'b00000010;
			end
		8'b00000010:
			begin
				inc_pc<=1;
				read_enable <= 0;
				wr_en <= 0;
				opcode <= 3'b000;
				read_RAM <= 0;
				write_RAM <= 0;
				state <=sig_out;
			end
		8'b00000011:
			begin
				inc_pc<=0;
				read_enable <= 0;
				wr_en <= 0;
				opcode <= 3'b001;
				read_RAM <= 0;
				write_RAM <= 0;
				state <=8'b00000001;
			end
		8'b00000100:
			begin
				inc_pc<=0;
				read_enable <= 0;
				wr_en <= 0;
				opcode <= 3'b010;
				read_RAM <= 0;
				write_RAM <= 0;
				state <=8'b00000001;
			end
		8'b00000101:
			begin
				inc_pc<=0;
				read_enable <= 0;
				wr_en <= 0;
				opcode <= 3'b011;
				read_RAM <= 0;
				write_RAM <= 0;
				state <=8'b00000001;
			end
		8'b00000110:
			begin
				inc_pc<=0;
				read_enable <= 0;
				wr_en <= 1;
				opcode <= 3'b000;
				read_RAM <= 0;
				write_RAM <= 0;
				state <=8'b00000001;
			end
		8'b00000111:
			begin
				inc_pc<=0;
				read_enable <= 1;
				wr_en <= 0;
				opcode <= 3'b000;
				read_RAM <= 0;
				write_RAM <= 0;
				state <=8'b00001000;
			end
		8'b00001000:
			begin
				inc_pc<=1;
				read_enable <= 0;
				wr_en <= 0;
				opcode <= 3'b000;
				read_RAM <= 0;
				write_RAM <= 0;
				state <=8'b00001001;
			end
		8'b00001001:
			begin
				inc_pc<=0;
				read_enable <= 0;
				wr_en <= 0;
				opcode <= 3'b100;
				read_RAM <= 0;
				write_RAM <= 0;
				state <=8'b00000001;
			end
		8'b00001010:
			begin
				inc_pc<=0;
				read_enable <= 0;
				wr_en <= 0;
				opcode <= 3'b000;
				read_RAM <= 1;
				write_RAM <= 0;
				state <=8'b00001011;
			end
		8'b00001011:
			begin
				inc_pc<=0;
				read_enable <= 0;
				wr_en <= 0;
				opcode <= 3'b101;
				read_RAM <= 0;
				write_RAM <= 0;
				state <=8'b00000001;
			end
		8'b00001100:
			begin
				inc_pc<=0;
				read_enable <= 0;
				wr_en <= 0;
				opcode <= 3'b000;
				read_RAM <= 1;
				write_RAM <= 0;
				state <=8'b00001101;
			end
		8'b00001101:
			begin
				inc_pc<=0;
				read_enable <= 0;
				wr_en <= 0;
				opcode <= 3'b000;
				read_RAM <= 0;
				write_RAM <= 1;
				state <=8'b00000001;
			end
		
		default: state <= 8'b00000000;
      endcase
	end
endmodule