module Bus(input wire [7:0] AC_in,
			  input wire [7:0] SR1_in,
			  input wire [7:0] SR2_in,
			  input wire [7:0] SR3_in,
			  input wire [15:0] R1_in,
			  input wire [15:0] R2_in,
			  input wire [7:0] RRR_in,
			  input wire [7:0] CRR_in,
			  output reg [7:0] SR1_out,
			  output reg [15:0] R1_out,
			  output reg [15:0] R2_out,
			  output reg [7:0] MDR_out,
			  output reg [15:0] MAR_out,
			  output reg [15:0] AC_out,
			  input wire [3:0] select_source,
			  input wire [2:0] select_destination,
			  input clock);

reg [15:0] value;

always@(posedge clock)
	begin
		case(select_source)
		0'b0000:
			begin
				value <= value;
			end
		
		0'b0001:
			begin
				value <= AC_in;
			end
			
		0'b0010:
			begin
				value <= {0'b00000000,SR1_in};
			end
			
		0'b0011:
			begin
				value <= {0'b00000000,SR2_in};
			end
			
		0'b0100:
			begin
				value <= {0'b00000000,SR3_in};
			end
			
		0'b0101:
			begin
				value <= R1_in;
			end
			
		0'b0110:
			begin
				value <= R2_in;
			end
			
		0'b0111:
			begin
				value <= {0'b00000000,RRR_in};
			end
			
		0'b1000:
			begin
				value <= {0'b00000000,CRR_in};;
			end
		
		endcase
	end
	
always@(posedge clock)
	begin
		case(select_destination)
		0'b000:
			begin
				value <= value;
			end
		
		0'b001:
			begin
				AC_out <= value;
			end
			
		0'b010:
			begin
				MAR_out <= value;
			end
			
		0'b011:
			begin
				MDR_out <= value[7:0];
			end
			
		0'b100:
			begin
				SR1_out <= value[7:0];
			end
			
		0'b101:
			begin
				R1_out <= value;
			end
			
		0'b110:
			begin
				R2_out <= value;
			end
		
		endcase
	end
	
endmodule		  
			  